generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  otp           OTP?         @relation(fields: [otpId], references: [id], onDelete: Cascade)
  otpId         String?      @unique
  accounts      Account[]
  sessions      Session[]
  auctionItems  AuctionItem[]
  bids          Bid[]
}

model OTP {
  id        String   @id @default(cuid())
  code      String
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuctionItem {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  category     String
  startingBid  Float
  reservePrice Float?
  currentBid   Float?
  bids         Int      @default(0)
  auctionStart DateTime
  auctionEnd   DateTime
  images       String[] // Array of image URLs
  shippingInfo String?  @db.Text
  status       String   @default("active") // active, ended, cancelled
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bidHistory   Bid[]
}

model Bid {
  id           String      @id @default(cuid())
  amount       Float
  createdAt    DateTime    @default(now())
  
  // Relations
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionItemId String
  auctionItem  AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
}

